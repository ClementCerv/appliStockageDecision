using System;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using StockageDecisionsAgissantPPDS.Common;

namespace StockageDecisionsAgissantPPDS.Test.Contract
{
    /// <summary>
    /// Vérification de contrat
    /// </summary>
    public static class ContractEnsured<TType>
    {
        private static readonly Type ReflectedType = typeof(TType);

        /// <summary>
        /// Vérifie que l'ensemble des propriétés listées représente l'intégralité de l'identité de la classe
        /// </summary>
        public static bool PropertiesRepresentsClassIdentity(params string[] expectedNames)
        {
            var markedAsClassIdentity = ReflectedType.GetProperties()
                .Where(prop => Attribute.IsDefined(prop, typeof(ClassIdentityAttribute))).ToArray();

            var markedAsClassIdentityNames = markedAsClassIdentity.Select(prop => prop.Name).ToArray();

            var missingInClassIdentity = expectedNames.Except(markedAsClassIdentityNames);
            if (missingInClassIdentity.Any()) return false;

            var missingInNames = markedAsClassIdentityNames.Except(expectedNames);
            if (missingInNames.Any()) return false;

            return markedAsClassIdentity.All(IsPropertyImmutable);
        }

        /// <summary>
        /// Vérifie l'immutabilité d'une propriété
        /// </summary>
        public static bool IsPropertyImmutable(string name)
        {
            PropertyInfo property = ReflectedType.GetProperty(name);
            return IsPropertyImmutable(property);
        }

        private static bool IsPropertyImmutable(PropertyInfo property)
        {
            if (property == null) return false;

            bool isWriteable = property.CanWrite;
            bool getMethodPure = Attribute.IsDefined(property.GetMethod, typeof(PureAttribute));
            bool getMethodAutomatic = IsAutoGeneratedInstanceProperty(property);

            return !isWriteable && (getMethodPure || getMethodAutomatic);
        }

        private static bool IsAutoGeneratedInstanceProperty(PropertyInfo info)
        {
            bool mightBe = info.GetGetMethod()
                .GetCustomAttributes(
                    typeof(CompilerGeneratedAttribute),
                    true
                )
                .Any();
            if (!mightBe) return false;
            if (info.DeclaringType == null) return false;

            return info.DeclaringType
                .GetFields(BindingFlags.NonPublic | BindingFlags.Instance)
                .Where(f => f.Name.Contains(info.Name))
                .Where(
                    f => f.Name.Contains("BackingField")
                )
                .Any(f => f.GetCustomAttributes(
                        typeof(CompilerGeneratedAttribute),
                        true
                    ).Any());
        }
    }
}
